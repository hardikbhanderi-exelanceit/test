name: CI/CD Deploy to AWS EC2

on:
  push:
    branches: ["main", "dev"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Copy validation files to EC2
        if: ${{ secrets.SERVER_HOST && secrets.PRIVATE_SSH_KEY }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          source: ".env.example"
          target: "~/test/"
          strip_components: 0

      - name: Validate Environment Variables on EC2
        if: ${{ secrets.SERVER_HOST && secrets.PRIVATE_SSH_KEY }}
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          script: |
            cd ~/test

            [ ! -f ".env" ] && echo "❌ ERROR: .env file not found" && exit 1
            [ ! -f ".env.example" ] && echo "❌ ERROR: .env.example not found" && exit 1

            REQUIRED_KEYS=$(grep -v '^#' .env.example | grep -v '^$' | grep '=' | cut -d '=' -f1 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            MISSING_KEYS=()
            EMPTY_KEYS=()

            while IFS= read -r key; do
              [ -z "$key" ] && continue
              
              if ! grep -q "^${key}=" .env; then
                MISSING_KEYS+=("$key")
              else
                VALUE=$(grep "^${key}=" .env | cut -d '=' -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr -d '"' | tr -d "'")
                [ -z "$VALUE" ] && EMPTY_KEYS+=("$key")
              fi
            done <<< "$REQUIRED_KEYS"

            [ ${#MISSING_KEYS[@]} -gt 0 ] && echo "❌ Missing required variables" && exit 1
            [ ${#EMPTY_KEYS[@]} -gt 0 ] && echo "⚠️  WARNING: ${#EMPTY_KEYS[@]} empty variables found"
            echo "✅ Environment validation passed"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Prepare deploy key on runner
        if: ${{ secrets.PRIVATE_SSH_KEY }}
        run: |
          echo "Writing deploy key to file (temporary)"
          printf '%s' "${{ secrets.PRIVATE_SSH_KEY }}" > deploy_key.pem
          chmod 600 deploy_key.pem

      - name: Upload deploy key to public EC2
        if: ${{ secrets.PRIVATE_SSH_KEY }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          source: "deploy_key.pem"
          target: "~/.ssh/deploy_key.pem"
          strip_components: 0

      - name: Deploy to AWS EC2
        if: ${{ secrets.SERVER_HOST && secrets.PRIVATE_SSH_KEY }}
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          script: |
            # Ensure Docker is available on the deployment host (public EC2).
            # Note: public EC2 is used for builds/deploy orchestration only —
            # the application runs on private EC2s behind the NLB.
            if ! command -v docker &> /dev/null; then
              curl -fsSL https://get.docker.com | sudo sh
            fi
            sudo docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            # Pull the new image to the public EC2 to seed cache (optional)
            sudo docker pull ${{ steps.meta.outputs.tags }} || true
            # Remove old images for this repo except the latest tag (cleanup)
            sudo docker images --format '{{.Repository}} {{.Tag}} {{.ID}}' | grep 'ghcr.io/hardikbhanderi-exelanceit/test' | grep -v "${{ steps.meta.outputs.tags }}" | awk '{print $3}' | xargs -r sudo docker rmi || true
            echo "Public EC2 pull/cleanup complete. Private EC2 instances will be instructed to deploy via the NLB webhook."

      - name: Trigger deploy on private EC2s via NLB
        if: always()
        run: |
          echo "Triggering deploy on private instances via NLB"
          if [ -z "${{ secrets.NLB_DNS }}" ] || [ "${{ secrets.NLB_DNS }}" = "" ]; then
            echo "WARNING: NLB_DNS secret is not set — skipping webhook trigger"
          else
            curl -sS -X POST "http://${{ secrets.NLB_DNS }}:8000/deploy" \
              -H "Content-Type: application/json" \
              -d "{\"image\": \"${{ steps.meta.outputs.tags }}\"}" || echo "Webhook request failed (continuing)"
          fi

      - name: Deploy to private EC2s via SSH from public EC2
        if: ${{ secrets.PRIVATE_HOSTS && secrets.SERVER_HOST && secrets.PRIVATE_SSH_KEY }}
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          script: |
            set -e
            echo "Reading private hosts from secret"
            PRIVATE_HOSTS="${{ secrets.PRIVATE_HOSTS }}"  # comma-separated
            IMAGE_TAG="${{ steps.meta.outputs.tags }}"
            echo "Deploy image: $IMAGE_TAG"

            for h in $(echo "$PRIVATE_HOSTS" | tr ',' ' '); do
              echo "Deploying to $h"
              ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key.pem ubuntu@${h} bash -s <<'DEPLOY'
                set -e
                IMAGE_TAG="${IMAGE_TAG}"
                echo "Pulling $IMAGE_TAG"
                sudo docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} || true
                sudo docker pull "$IMAGE_TAG"
                sudo docker stop test-app || true
                sudo docker rm test-app || true
                sudo docker run -d --name test-app -e PORT=8000 -p 8000:8000 "$IMAGE_TAG"
                echo "Deployment on $(hostname) complete"
              DEPLOY
            done
