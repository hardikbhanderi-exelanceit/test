name: CI/CD Deploy to AWS EC2

on:
  push:
    branches: ["main", "dev"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Copy validation files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          source: ".env.example"
          target: "~/test/"
          strip_components: 0

      - name: Validate Environment Variables on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          script: |
            cd ~/test

            echo "üîç Starting environment validation..."
            echo "================================"

            # Check if .env exists
            if [ ! -f ".env" ]; then
              echo "‚ùå ERROR: .env file not found in ~/test/"
              echo "Please create .env file on EC2 instance"
              exit 1
            fi

            echo "‚úÖ .env file found"

            # Check if .env.example exists
            if [ ! -f ".env.example" ]; then
              echo "‚ùå ERROR: .env.example file not found"
              exit 1
            fi

            echo "‚úÖ .env.example file found"
            echo ""

            # Extract keys from .env.example (ignore comments and empty lines)
            REQUIRED_KEYS=$(grep -v '^#' .env.example | grep -v '^$' | grep '=' | cut -d '=' -f1 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

            MISSING_KEYS=()
            EMPTY_KEYS=()

            echo "üîé Checking required environment variables..."
            echo ""

            # Check each required key
            while IFS= read -r key; do
              if [ -z "$key" ]; then
                continue
              fi
              
              # Check if key exists in .env
              if ! grep -q "^${key}=" .env; then
                MISSING_KEYS+=("$key")
                echo "‚ùå Missing: $key"
              else
                # Check if key has a value
                VALUE=$(grep "^${key}=" .env | cut -d '=' -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr -d '"' | tr -d "'")
                if [ -z "$VALUE" ]; then
                  EMPTY_KEYS+=("$key")
                  echo "‚ö†Ô∏è  Empty: $key"
                else
                  echo "‚úÖ Valid: $key"
                fi
              fi
            done <<< "$REQUIRED_KEYS"

            echo ""
            echo "================================"

            # Report final results
            if [ ${#MISSING_KEYS[@]} -gt 0 ]; then
              echo "‚ùå VALIDATION FAILED! Missing required environment variables."
              exit 1
            fi

            if [ ${#EMPTY_KEYS[@]} -gt 0 ]; then
              echo ""
              echo "‚ö†Ô∏è  WARNING: Some variables are empty"
              echo ""
              echo "Empty keys in .env:"
              for key in "${EMPTY_KEYS[@]}"; do
                echo "  - $key"
              done
              echo ""
              echo "Continuing deployment, but please verify these values"
            fi

            echo ""
            echo "‚úÖ Environment validation passed!"
            echo "All required variables are present"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          script: |
            cd ~/test

            echo "üöÄ Starting deployment..."

            # Login to container registry
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest image
            echo "üì¶ Pulling latest image..."
            sudo docker pull ${{ steps.meta.outputs.tags }}

            # Stop and remove old container
            echo "üõë Stopping old container..."
            sudo docker stop test-app || true
            sudo docker rm test-app || true

            # Run new container with .env file
            echo "‚ñ∂Ô∏è  Starting new container..."
            sudo docker run -d \
              --name test-app \
              -p 3000:3000 \
              --env-file .env \
              --restart unless-stopped \
              ${{ steps.meta.outputs.tags }}

            # Wait and verify
            echo "‚è≥ Waiting for container to start..."
            sleep 5

            if sudo docker ps | grep -q test-app; then
              echo "‚úÖ Deployment successful!"
              echo ""
              echo "üìã Container status:"
              sudo docker ps --filter name=test-app --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              echo ""
              echo "üìú Recent logs:"
              sudo docker logs --tail 20 test-app
            else
              echo "‚ùå Deployment failed - container is not running"
              echo ""
              echo "üìú Container logs:"
              sudo docker logs test-app
              exit 1
            fi
