name: CI/CD Deploy to AWS EC2

on:
  push:
    branches: ["main", "dev"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Copy validation files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          source: ".env.example"
          target: "~/test/"
          strip_components: 0

      - name: Validate Environment Variables on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          script: |
            cd ~/test

            [ ! -f ".env" ] && echo " ERROR: .env file not found" && exit 1
            [ ! -f ".env.example" ] && echo " ERROR: .env.example not found" && exit 1

            REQUIRED_KEYS=$(grep -v '^#' .env.example | grep -v '^$' | grep '=' | cut -d '=' -f1 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            MISSING_KEYS=()
            EMPTY_KEYS=()

            while IFS= read -r key; do
              [ -z "$key" ] && continue
              
              if ! grep -q "^${key}=" .env; then
                MISSING_KEYS+=("$key")
              else
                VALUE=$(grep "^${key}=" .env | cut -d '=' -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr -d '"' | tr -d "'")
                [ -z "$VALUE" ] && EMPTY_KEYS+=("$key")
              fi
            done <<< "$REQUIRED_KEYS"

            [ ${#MISSING_KEYS[@]} -gt 0 ] && echo " Missing required variables" && exit 1
            [ ${#EMPTY_KEYS[@]} -gt 0 ] && echo "‚ö†Ô∏è  WARNING: ${#EMPTY_KEYS[@]} empty variables found"
            echo "‚úÖ Environment validation passed"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Upload deploy key to public EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          script: |
            echo "Writing deploy key to file on EC2"
            printf '%s' "${{ secrets.PRIVATE_SSH_KEY }}" > ~/.ssh/hardik-test.pem
            chmod 600 ~/.ssh/hardik-test.pem
            ls -la ~/.ssh/hardik-test.pem
            echo "Deploy key uploaded and permissions set"

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          script: |
            # Ensure Docker is available on the deployment host (public EC2).
            # Note: public EC2 is used for builds/deploy orchestration only ‚Äî
            # the application runs on private EC2s behind the NLB.
            if ! command -v docker &> /dev/null; then
              curl -fsSL https://get.docker.com | sudo sh
            fi
            sudo docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            # Pull the new image to the public EC2 to seed cache (optional)
            sudo docker pull ${{ steps.meta.outputs.tags }} || true
            # Remove old images for this repo except the latest tag (cleanup)
            sudo docker images --format '{{.Repository}} {{.Tag}} {{.ID}}' | grep 'ghcr.io/hardikbhanderi-exelanceit/test' | grep -v "${{ steps.meta.outputs.tags }}" | awk '{print $3}' | xargs -r sudo docker rmi || true
            echo "Public EC2 pull/cleanup complete. Private EC2 instances will be instructed to deploy via the NLB webhook."

      - name: Trigger deploy on private EC2s via NLB
        if: always()
        run: |
          echo "Triggering deploy on private instances via NLB"
          if [ -z "${{ secrets.NLB_DNS }}" ] || [ "${{ secrets.NLB_DNS }}" = "" ]; then
            echo "WARNING: NLB_DNS secret is not set ‚Äî skipping webhook trigger"
          else
            echo "Attempting to connect to NLB at: ${{ secrets.NLB_DNS }}:8000"
            echo "Testing connectivity..."
            if curl -sS --connect-timeout 10 "http://${{ secrets.NLB_DNS }}:8000/health" 2>/dev/null; then
              echo "NLB is reachable, sending deploy webhook..."
              curl -sS -X POST "http://${{ secrets.NLB_DNS }}:8000/deploy" \
                -H "Content-Type: application/json" \
                -d "{\"image\": \"${{ steps.meta.outputs.tags }}\"}" || echo "Webhook request failed (continuing)"
            else
              echo "WARNING: NLB is not reachable at ${{ secrets.NLB_DNS }}:8000"
              echo "This might be expected if NLB is not configured or the service is down"
              echo "Continuing with SSH-based deployment..."
            fi
          fi

      - name: Deploy to private EC2s via SSH from public EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          script: |
            set -e
            echo "Reading private hosts from secret"
            PRIVATE_HOSTS="${{ secrets.PRIVATE_HOSTS }}"  # comma-separated
            IMAGE_TAG="${{ steps.meta.outputs.tags }}"
            echo "Deploy image: $IMAGE_TAG"

            # Copy deployment script to public EC2
            cat > deploy-script.sh << 'EOF'
#!/bin/bash
set -e
IMAGE_TAG="$1"
GITHUB_ACTOR="$2"
GITHUB_TOKEN="$3"
PRIVATE_HOSTS="$4"

echo "=== Starting Multi-Host Deployment ==="
echo "Image: $IMAGE_TAG"
echo "GitHub Actor: $GITHUB_ACTOR"
echo "Private Hosts: $PRIVATE_HOSTS"
echo "Timestamp: $(date)"

success_count=0
total_count=0
failed_hosts=()

for host in $(echo "$PRIVATE_HOSTS" | tr ',' ' '); do
  total_count=$((total_count + 1))
  echo "--- Deploying to $host ---"
  
  # Create deployment script for this host
  deploy_script=$(cat <<DEPLOY_EOF
set -e
echo "=== Deployment started on \$(hostname) at \$(date) ==="
echo "Image: $IMAGE_TAG"
echo "Server: \$(hostname)"
echo "IP: \$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4 2>/dev/null || echo 'unknown')"

# Install Docker if not present
echo "Checking Docker installation..."
if ! command -v docker &> /dev/null; then
  echo "Installing Docker..."
  curl -fsSL https://get.docker.com | sudo sh
  sudo usermod -aG docker ubuntu
  echo "Docker installed successfully"
else
  echo "Docker is already installed"
fi

# Login to GHCR
echo "Logging into GitHub Container Registry..."
sudo docker login ghcr.io -u $GITHUB_ACTOR -p $GITHUB_TOKEN || echo "Failed to login to GHCR, continuing..."

# Pull the new image
echo "Pulling image: $IMAGE_TAG"
sudo docker pull "$IMAGE_TAG" || echo "Failed to pull image, continuing with existing image..."

# Stop and remove old container
echo "Stopping old container..."
sudo docker stop test-app || echo "No running container to stop"

echo "Removing old container..."
sudo docker rm test-app || echo "No container to remove"

# Run new container
echo "Starting new container..."
sudo docker run -d --name test-app -e PORT=8000 -p 8000:8000 "$IMAGE_TAG"

# Verify container is running
sleep 5
if sudo docker ps | grep -q test-app; then
  echo "‚úÖ Container is running successfully"
  sudo docker ps | grep test-app
else
  echo "‚ùå Container failed to start"
  sudo docker logs test-app || echo "No logs available"
  exit 1
fi

echo "=== Deployment completed on \$(hostname) at \$(date) ==="
DEPLOY_EOF
)

  # Execute deployment
  if echo "$deploy_script" | ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ~/.ssh/hardik-test.pem ubuntu@${host} bash; then
    echo "‚úÖ Deployment to $host completed successfully"
    success_count=$((success_count + 1))
  else
    echo "‚ùå Deployment to $host failed"
    failed_hosts+=("$host")
  fi
done

# Summary
echo "=== Deployment Summary ==="
echo "‚úÖ Successful deployments: $success_count/$total_count"
if [ ${#failed_hosts[@]} -gt 0 ]; then
  echo "‚ùå Failed hosts: ${failed_hosts[*]}"
  exit 1
else
  echo "üéâ All deployments completed successfully!"
fi
EOF

            # Execute the deployment script
            chmod +x deploy-script.sh
            ./deploy-script.sh "$IMAGE_TAG" "${{ github.actor }}" "${{ secrets.GITHUB_TOKEN }}" "$PRIVATE_HOSTS"
